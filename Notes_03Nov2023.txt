Hibernate 1:

image of the product			DONE
Select using spring boot forms		DONE
Hibernate Validations		DONE
Hibernate/ Jpa query language	
Jpa relationships
how to access rest api from mvc project

Entity class: Product
	id
	name
	price
	pic

package org.mcet.demo.entity;

import java.util.Arrays;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;

@Entity
public class Product {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	private String name;
	private Double price;
	//mysql datatypes for image		tinyblob, mediumblob, longblob
	@Lob				//longblob
	private byte[] pic;
	
	public Product() {}

	public Product(Integer id, String name, Double price) {
		super();
		this.id = id;
		this.name = name;
		this.price = price;
	}

	
	public Product(Integer id, String name, Double price, byte[] pic) {
		super();
		this.id = id;
		this.name = name;
		this.price = price;
		this.pic = pic;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	
	public byte[] getPic() {
		return pic;
	}

	public void setPic(byte[] pic) {
		this.pic = pic;
	}

	@Override
	public String toString() {
		return "Product [id=" + id + ", name=" + name + ", price=" + price + ", pic=" + pic.length + "]";
	}


	
}

----------------------------
in controller
@MultipartConfig
on the class

to convert byte[] to Base64String

<dependency>
    <groupId>commons-io</groupId>
    <artifactId>commons-io</artifactId>
    <version>2.11.0</version>
</dependency>



Task:
implement image in your entity and test it.
-----------------------------------------------------
1) Spring form validations
	hibernate validators

Entity class itself to have rules tha much be satisfied in order to add / update entity
name cannot be blank		<input type="text" required />
name must be atleast 5 characters	

will validate the entity object

What is a spring form?
	Spring treats a FORM as an object
		ModelAttribute

1) in pom.xml, add the hibernate validator dependency
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>6.0.13.Final</version>
		</dependency>
2) add the spring form tablib
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
3) change the form as:
     <form:form method="post" action="/btn">
     	Id: <form:input path="id" type="number" class="form-control" />
     	Name: <form:input path="name" type="text" name="name" class="form-control" />
     	Price: <form:input path="price" type="number" name="price" class="form-control" />     	
     	<br/>
     	<input type="submit" name="add" value="Add" class="btn btn-success" />
     	<input type="submit" name="update" value="Update" class="btn btn-warning" />
     	<input type="submit" name="delete" value="Delete" class="btn btn-danger" />
     	
     </form:form>
4) Entity class to have rule
	name must be atleast 5 characters
	price must be >0

	@Size(min = 5,message = "Name must be atleast 5 letters")
	private String name;

5) in controller, validate

	@RequestMapping(value = "/btn", method = RequestMethod.POST, params = "add" )
	public ModelAndView add(@Valid @ModelAttribute("product") Product product, BindingResult br)
	{
		if(br.hasErrors())
		{
			List<Product> products = pr.findAll();
			ModelAndView mv=new ModelAndView();
			mv.setViewName("index");
			mv.addObject("product", product);
			mv.addObject("products", products);
			return mv;			
		}else
		{
			pr.save(product);
		}
		return home();
	}


Problem:
org.apache.tomcat.util.http.fileupload.impl.FileSizeLimitExceededException: The field pic exceeds its maximum permitted size of 1048576 bytes.

Solution:	in mysql:
SET GLOBAL max_allowed_packet=1073741824;
----------------------------------
Task:
Create signup.jsp
the user should fill the details to signup /register themselves as an user.
After signup is successful, (a row should have been added to the USER_MASTER table)
	entity class name: User		table name: USER_MASTER

@Entity
@Table(name="USER_MASTER")
public class User
{
..................
}
They should be able to login
	login.jsp

In home page, provide hyperlink to "signup" or "login"
In Login page 	mention a link	"New users, click here to signup"

In Sign up page,	mention a link	"Existing users, click here to login"

-----------------------------------------
Signup for to have validations:
	i) Password and Confirm password must match
	ii) username / password cannot be blank
	iii) email address format
	iv) Phone number must be 10 digit number
validations in HTML5, Js, Hibernate validators
After the signup is successful, Display a success message.
After login is successful, Welcome the user by their name.
Signed in user only allowed to visit "product" page. 
	Others see message "You have not logged in. Click here to go to login page"

https://github.com/jagasia/mcet-starter

