Sprint Boot - 2
Restful Webservices:
----------------------------
Do you remember, in javascript, we created JSON string from object and vice versa.

Means, a html page can be converted into an object JSON and sent to back end.
the backend receives the JSON and do the needful (insert/update/delete/etc)
So you understand that our restful webservice /rest api should be able to 
	receive JSON and store it in the database
	receive JSON and update data in the database
	return JSON when they want all records 
	return JSON when they find a record by id
	or any other specific requirements.

What is a webservice?
	from 2001 onwards, this webservice concept evolved.
	Why it was introduced?
		The need for interoperability.
	what is interoperability?
		The ability to access programs from anywhere anytime from any platform
		ex:	a program created in c#. How can we call that program from 			java?
		why should we call?	
		consider RedBus.com
			this redbus application is able to access many travels database
			travels: KPN travels, YBM travels, Hindustan travels
			several travels have their own database.

			redbus application is allowed to access KPN travels database.
			BUT NOT DIRECTLY.

			redbus is allowed to access a program that KPN travels provide.
			that program is the webservice.

	2001, SOAP webservices were introduced
		Simple Object Access Protocol
		used XML format

	RESTful webservices		REpresentational State Transfer
		support	XML, JSON, text, HTML and many formats
		are stateless	every request is independent
		every method has separate URL

Spring boot RESTful webservice		/ 	REST api
	is very simple technique to create webservices.

1) example
	without database
2) example	
	with databse	

Demo:
1) create a spring boot project
	from spring initializr
	group id: org.mcet.demo
	artifact id: karthick
	maven
	java
	2.7.17
	jar

	Spring web
2) download, unzip
3) copy the folder to your workspace
4) import "existing maven projects"
5) run the project

Problem:
	port 8080 already in use.

	to change the port number, go to		"src/main/resource"
	application.properties

		server.port=8081


Restful webservice:
	by creating a rest controller, we can make this project, a restful webservice.

What is a controller?
	we know servlet. But servlet has a drawback. It is not a POJO class.
	controller class is a POJO class style of implement servlets.
in spring boot, there will be a dispatcher servlet that receives all the requests coming to the server.
This DS will determine which method of the controller to be invoked based on the url.
every web method has an URL

	
What is POJO?
	Plain Old Java Objects
	a class that do not inherit a super class and do not implement any interface is a pojo



Demo 2:
In the same project, lets create a rest controller class.
in spring boot, remember, you have to follow conventions. 
all the classes, interface, you create, must be inside the base package / its subpackage.
right click base packe, New -> class	"MyController"

package org.mcet.demo;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MyController {

	@GetMapping
	public String home()
	{
		return "Hello welcome to my restful webservice";
	}
}

Task:
create a rest controller class and restart the project. check the output in:

http://localhost:8081/

DispatcherServlet

MVC

HTTP methods
	GET
	POST
	PUT
	DELETE
	PATCH

the above are HTTP methods

GET		read in CRUD
	whenever you type an URL in the address bar of the browser, you are accesing that URL using GET method only.

	is used when you want to "retrieve" data from the server.

POST		create in CRUD
	is used for adding a new resource

PUT		update in CRUD
	is used for updating existing entire resource

DELETE		delete in CRUD
	is used for removing a resource

PATCH	
	is used to update partially


Task:
	create the methods for 
		GET
		POST
		PUT
		DELETE

and test them in POSTMAN


Task:
package org.mcet.demo;

import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MyController {

	private List<String> countries=new ArrayList<>();
	
	@GetMapping
	public List<String> home()
	{
//		return "Hello welcome to my restful webservice";
		return countries;
	}
	
	@PostMapping("/{country}")
	public String post(@PathVariable("country") String country)
	{
		countries.add(country);
		return "THis is post mapping. working fine";
	}
	
	@PutMapping
	public String put()
	{
		return "The put mapping works fine";
	}
	
	@DeleteMapping("/{country}")
	public String delete(@PathVariable("country")String country)
	{
		String status="Not found";
		if(countries.contains(country))
		{
			countries.remove(country);
			status="Removed";
		}
		return status;
	}
	
}

----------------------------
Product
	id
	name
	price

package org.mcet.demo;

public class Product {
	private Integer id;
	private String name;
	private Double price;
	
	public Product() {}

	public Product(Integer id, String name, Double price) {
		super();
		this.id = id;
		this.name = name;
		this.price = price;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	@Override
	public String toString() {
		return "Product [id=" + id + ", name=" + name + ", price=" + price + "]";
	}
	
}



------------------
package org.mcet.demo;

import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/product")
public class ProductController {
	private List<Product> products=new ArrayList<>();
	
	@PostMapping
	public Product create(@RequestBody Product product) {
		products.add(product);
		return product;
	}
	
	@GetMapping
	public List<Product> read() {
		return products;
	}
	
	@GetMapping("/{id}")
	public Product read(@PathVariable("id") Integer id) {
		Product temp=null;
		for(Product p : products)
		{
			if(p.getId().equals(id))
			{
				temp=p;
				break;
			}
		}
		return temp;
	}
	
	@PutMapping
	public Product update(@RequestBody Product product) {
		Product temp=null;
		for(Product p : products)
		{
			if(p.getId().equals(product.getId()))
			{
				temp=p;
				p=product;
				break;
			}
		}
		return temp;
	}
	
	@DeleteMapping("/{id}")
	public Product delete(@PathVariable("id") Integer id) {
		Product temp=null;
		for(Product p : products)
		{
			if(p.getId().equals(id))
			{
				temp=p;
				products.remove(p);
				break;
			}
		}
		return temp;
	}
	
}

Task:
Create a rest controller for Customer and test it in postman.
